(()=>{"use strict";var n={28:(n,e,r)=>{r.d(e,{Z:()=>c});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  box-sizing: border-box;\n  font: 14px;\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid black;\n  width: 10%;\n  height: 10%;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;;EAEE,iBAAiB;EACjB,aAAa;EACb,aAAa;AACf;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;;EAEE,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,WAAW;AACb;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,UAAU;EACV,WAAW;AACb",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  box-sizing: border-box;\n  font: 14px;\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid black;\n  width: 10%;\n  height: 10%;\n}"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);t&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],l=t.base?s[0]+t.base:s[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var p=r(A),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,t);t.byIndex=c,e.splice(c,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=r(a[i]);e[c].references--}for(var s=t(n,o),l=0;l<a.length;l++){var d=r(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},672:(n,e,r)=>{r.d(e,{lA:()=>a});var t=r(171);const o=(n,e)=>{const r=[],t={},o=[];let a=1;const i=(n,e,r,o,a)=>{const i=(n+9).toString(36);t[a]=[];for(let n=0;n<=r;n+=1){const r=(e+9+n).toString(36);"y"===o?t[a].push(i.toUpperCase()+r):"x"===o&&t[a].push(r.toUpperCase()+i)}},c=(n,e)=>{const t=parseInt(n[0],36)-9,o=parseInt(e[0],36)-9,c=parseInt(n[1],36)-9,s=o-t,l=parseInt(e[1],36)-9-c,d=(()=>{const n=`ship${a}`;return a+=1,n})();let A=0,p="";0===s?(A=l,p="y",i(t,c,A,p,d)):0===l&&(A=s,p="x",i(c,t,A,p,d));const u=((n,e)=>{const r=(n=>{const e=[];for(let r=0;r<n;r+=1)e.push("not hit");return e})(n);return{shipLength:n,shipName:e,hit:n=>(r[n]="hit",r),isSunk:()=>!r.includes("not hit")}})(A,d);return r.push(u),u},s=(n,e)=>{const r=parseInt(n[0],36)-9,t=parseInt(n[1],36)-9,o=[],a=r-e,i=r+e,c=t-e,s=t+e;return a>0&&o.push(a.toString()+t.toString()),i<11&&o.push(i.toString()+t.toString()),c>0&&o.push(r.toString()+c.toString()),s<11&&o.push(r.toString()+s.toString()),o},l=(n,e)=>Math.floor(Math.random()*(e-n+1)-n),d=()=>{const n=(0,9,String.fromCharCode(l(0,9)+97));const e=l(1,10);return n.toUpperCase()+e.toString()};return{placeShip:c,shipCoordinates:t,receiveAttack:n=>{const e=(a=t,i=n,Object.keys(a).find((n=>a[n].includes(i))));var a,i;void 0!==e?r.forEach((n=>{n.shipName===e&&n.hit()})):o.push(n)},ships:r,receivedAttackCoordinates:o,areAllShipsSunk:()=>{let n=!0;return r.forEach((e=>{e.isSunk()||(n=!1)})),n},boardStart:n,boardEnd:e,fillBoard:()=>{const n=[5,4,3,2];for(let e=0;e<n;e+=1){let r=e;for(;r>=0;){const t=d(),o=s(t,n[e]);console.log(o);const a=o[l(0,3)];c(t,a),r-=1}}}}},a=()=>{const n=o(),e=o();n.fillBoard(),e.fillBoard(),(0,t.el)(n.shipCoordinates)}},171:(n,e,r)=>{r.d(e,{Bh:()=>t,FY:()=>o,el:()=>a});const t=(n,e)=>{for(let r=0;r<10;r+=1){const t=document.createElement("div");"col"===e?(t.classList.add("col-box"),t.textContent=String.fromCharCode(97+r).toUpperCase()):"row"===e&&(t.classList.add("row-box"),t.textContent=r+1),n.appendChild(t)}},o=n=>{for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const t=document.createElement("div");t.classList.add("box");const o=String.fromCharCode(97+r).toUpperCase(),a=(e+1).toString();t.dataset.coordinate=o+a,n.appendChild(t)}},a=n=>{const e=Object.values(n);console.log(e);const r=document.querySelectorAll(".box");console.log(r),r.forEach((n=>{for(let r=0;r<e.length;r+=1)n.dataset.coordinate===e[r]&&(n.style.backgroundColor="blue")}))}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return n[t](a,a.exports,r),a.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=r(171),e=r(379),t=r.n(e),o=r(795),a=r.n(o),i=r(569),c=r.n(i),s=r(565),l=r.n(s),d=r(216),A=r.n(d),p=r(589),u=r.n(p),m=r(28),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var g=r(672);const h=document.querySelector(".player__col-header"),C=document.querySelector(".player__row-header"),E=document.querySelector(".player__grid"),y=document.querySelector(".computer__col-header"),v=document.querySelector(".computer__row-header"),b=document.querySelector(".computer__grid");(0,n.Bh)(h,"col"),(0,n.Bh)(C,"row"),(0,n.FY)(E),(0,n.Bh)(y,"col"),(0,n.Bh)(v,"row"),(0,n.FY)(b),(0,g.lA)()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,