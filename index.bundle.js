(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --neutral: #525252;\n  --sky: #e0f2fe;\n  box-sizing: border-box;\n  font: 14px;\n  color: var(--neutral);\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid var(--neutral);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid var(--neutral);\n  width: 10%;\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n}\n\n.box--ship {\n  background-color: var(--sky);\n}\n\n.box--start-hor {\n  border-width: 2px 1px 2px 2px;\n  border-style: solid dotted solid solid;\n}\n\n.box--end-hor {\n  border-width: 2px 2px 2px 1px;\n  border-style: solid solid solid dotted;\n}\n\n.box--mid-hor {\n  border-width: 2px 1px 2px 1px;\n  border-style: solid dotted;\n}\n\n.box--start-ver {\n  border-width: 2px 2px 1px 2px;\n  border-style: solid solid dotted solid;\n}\n\n.box--end-ver {\n  border-width: 1px 2px 2px 2px;\n  border-style: dotted solid solid solid;\n}\n\n.box--mid-ver {\n  border-width: 1px 2px 1px 2px;\n  border-style: dotted solid;\n}\n\n.box--hidden {\n  background-color: white;\n  border: 1px solid var(--neutral)\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,sBAAsB;EACtB,UAAU;EACV,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;;EAEE,iBAAiB;EACjB,aAAa;EACb,aAAa;AACf;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;;EAEE,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,eAAe;EACf,gCAAgC;AAClC;;AAEA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,WAAW;AACb;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,UAAU;EACV,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,0BAA0B;AAC5B;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,0BAA0B;AAC5B;;AAEA;EACE,uBAAuB;EACvB;AACF",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --neutral: #525252;\n  --sky: #e0f2fe;\n  box-sizing: border-box;\n  font: 14px;\n  color: var(--neutral);\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid var(--neutral);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid var(--neutral);\n  width: 10%;\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n}\n\n.box--ship {\n  background-color: var(--sky);\n}\n\n.box--start-hor {\n  border-width: 2px 1px 2px 2px;\n  border-style: solid dotted solid solid;\n}\n\n.box--end-hor {\n  border-width: 2px 2px 2px 1px;\n  border-style: solid solid solid dotted;\n}\n\n.box--mid-hor {\n  border-width: 2px 1px 2px 1px;\n  border-style: solid dotted;\n}\n\n.box--start-ver {\n  border-width: 2px 2px 1px 2px;\n  border-style: solid solid dotted solid;\n}\n\n.box--end-ver {\n  border-width: 1px 2px 2px 2px;\n  border-style: dotted solid solid solid;\n}\n\n.box--mid-ver {\n  border-width: 1px 2px 1px 2px;\n  border-style: dotted solid;\n}\n\n.box--hidden {\n  background-color: white;\n  border: 1px solid var(--neutral)\n}"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(s[d]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&s[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),s=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(s).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var d=e[i],l=r.base?d[0]+r.base:d[0],c=a[l]||0,A="".concat(l," ").concat(c);a[l]=c+1;var p=t(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=o(u,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:h,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var d=r(e,o),l=0;l<a.length;l++){var c=t(a[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},672:(e,n,t)=>{t.d(n,{lA:()=>a});const r=()=>{const e=[],n={},t=[];let r=1;const o=()=>{const e=Object.values(n);return[].concat(...e)},a=(t,o)=>{const a=parseInt(t[0],36)-9;let s=0;const i=parseInt(o[0],36)-9;let d=0;s=void 0===t[2]?parseInt(t[1],10):parseInt(t.substr(t.length-2),10),d=void 0===o[2]?parseInt(o[1],10):parseInt(o.substr(o.length-2),10);const l=i-a,c=d-s,A=`Ship${r}`;let p=0;const u=[];if(0===l){p=c+1;for(let e=0;e<c+1;e+=1)u.push((a+9).toString(36).toUpperCase()+(s+e).toString());n[A]=u}else{p=l+1;for(let e=0;e<l+1;e+=1)u.push((a+e+9).toString(36).toUpperCase()+s.toString());n[A]=u}const h=((e,n)=>{const t=(e=>{const n=[];for(let t=0;t<e;t+=1)n.push("not hit");return n})(e);return{shipLength:e,shipName:n,hit:e=>{t[e]="hit"},isSunk:()=>!t.includes("not hit"),getShipHitArr:()=>t}})(p,A);e.push(h),r+=1},s=()=>Math.floor(10*Math.random()+1),i=(e,n)=>{const t=parseInt(e[0],36)-9;let r=0;const o=parseInt(n[0],36)-9;let a=0;r=void 0===e[2]?parseInt(e[1],10):parseInt(e.substr(e.length-2),10),a=void 0===n[2]?parseInt(n[1],10):parseInt(n.substr(n.length-2),10);const s=o-t,i=a-r,d=[];if(0===s)for(let e=0;e<i+1;e+=1)d.push((t+9).toString(36).toUpperCase()+(r+e).toString());else if(0===i)for(let e=0;e<s+1;e+=1)d.push((t+e+9).toString(36).toUpperCase()+r.toString());return d},d=e=>{const n=e,t=o();let r=!1;for(let e=0;e<n.length;e+=1)t.includes(n[e])&&(r=!0);return r},l=(e,n)=>{const t=[];for(let r=0;r<n.length;r+=1){const o=i(e,n[r]);d(o)&&t.push(n[r])}const r=[];for(let e=0;e<n.length;e+=1)t.includes(n[e])||r.push(n[e]);return r},c=(e,n)=>{const t=parseInt(e[0],36)-9;let r=0;r=void 0===e[2]?parseInt(e[1],10):parseInt(e.substr(e.length-2),10);const o=[];return t+n<11&&o.push((t+n+9).toString(36).toUpperCase()+r.toString()),r+n<11&&o.push((t+9).toString(36).toUpperCase()+(r+n).toString()),o},A=e=>{let n=[],t="";for(;0===n.length;){const r=(s()+9).toString(36).toUpperCase()+s().toString(),o=c(r,e);t=r,n=l(r,o)}const r=(0,o=n.length-1,Math.floor(Math.random()*(o-0+1))+0);var o;a(t,n[r])};return{placeShip:a,fillBoardRandomly:()=>{const e=[4,3,2,1];for(let n=0;n<e.length;n+=1){let t=n;for(;t+1>0;)A(e[n]),t-=1}},getShipCoordinatesObj:()=>n,getShipCoordinatesArr:o,receiveAttack:r=>{if(o().includes(r)){const t=(i=n,d=r,Object.keys(i).find((e=>i[e].includes(d))));a=t,s=n[t].indexOf(r),e.forEach((e=>{e.shipName===a&&e.hit(s)}))}else t.push(r);var a,s,i,d},getShips:()=>e,getMissedAttacksArr:()=>t,areAllShipsSunk:()=>{let n=!0;for(let t=0;t<e.length;t+=1)!1===e[t].isSunk()&&(n=!1);return n}}},o=()=>{const e=(e,n)=>{e.receiveAttack(n)};return{attack:e,compAttack:n=>{const t=()=>Math.floor(10*Math.random()+1),r=(t()+9).toString(36).toUpperCase()+t().toString();e(n,r)}}},a=()=>{const e=r(),n=r(),t=o(),a=o();return e.fillBoardRandomly(),n.fillBoardRandomly(),{playerBoard:e,compBoard:n,player:t,comp:a,checkWinner:()=>{e.areAllShipsSunk()?prompt("The computer won."):n.areAllShipsSunk()&&prompt("You won!")}}}},171:(e,n,t)=>{t.d(n,{Bh:()=>r,FY:()=>o,el:()=>i,To:()=>d,Pj:()=>A});const r=(e,n)=>{for(let t=0;t<10;t+=1){const r=document.createElement("div");"col"===n?(r.classList.add("col-box"),r.textContent=String.fromCharCode(97+t).toUpperCase()):"row"===n&&(r.classList.add("row-box"),r.textContent=t+1),e.appendChild(r)}},o=e=>{for(let n=0;n<10;n+=1)for(let t=0;t<10;t+=1){const r=document.createElement("div");r.classList.add("box");const o=String.fromCharCode(97+t).toUpperCase(),a=(n+1).toString();r.dataset.coordinate=o+a,e.appendChild(r)}},a=e=>{let n="";return n=e[0][0]===e[1][0]?"ver":"hor",n},s=e=>{e.parentElement.classList.contains("computer__grid")&&e.classList.add("box--hidden")},i=(e,n)=>{const t=Object.values(e);let r="";r="player"===n?document.querySelectorAll(".player__grid .box"):document.querySelectorAll(".computer__grid .box"),r.forEach((e=>{for(let n=0;n<t.length;n+=1){const r=a(t[n]);for(let o=0;o<t[n].length;o+=1)e.dataset.coordinate===t[n][o]&&(e.classList.add("box--ship"),0===o?(e.classList.add(`box--start-${r}`),s(e)):o===t[n].length-1?(e.classList.add(`box--end-${r}`),s(e)):(e.classList.add(`box--mid-${r}`),s(e)))}}))},d=e=>{e.classList.remove("box--hidden")},l=e=>{const n=[];for(let t=0;t<e.length;t+=1)"hit"===e[t]&&n.push(t);return n},c=(e,n)=>{const t=[];for(let r=0;r<e.length;r+=1)t.push(n[e[r]]);return t},A=(e,n)=>{const t=e.getShips(),r=Object.values(e.getShipCoordinatesObj()),o=[],a=e.getMissedAttacksArr();for(let e=0;e<t.length;e+=1){const n=t[e].getShipHitArr(),a=l(n);console.log(a);const s=r[e];console.log(s);const i=c(a,s);o.push(i)}const s=[].concat(...o);let i="";i="player"===n?document.querySelectorAll(".player__grid .box"):document.querySelectorAll(".computer__grid .box"),i.forEach((e=>{for(let n=0;n<s.length;n+=1)e.dataset.coordinate===s[n]&&(e.textContent="X");for(let n=0;n<a.length;n+=1)e.dataset.coordinate===a[n]&&(e.textContent="X")}))}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(171),n=t(379),r=t.n(n),o=t(795),a=t.n(o),s=t(569),i=t.n(s),d=t(565),l=t.n(d),c=t(216),A=t.n(c),p=t(589),u=t.n(p),h=t(28),g={};g.styleTagTransform=u(),g.setAttributes=l(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=A(),r()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var m=t(672);const C=document.querySelector(".player__col-header"),f=document.querySelector(".player__row-header"),x=document.querySelector(".player__grid"),b=document.querySelector(".computer__col-header"),E=document.querySelector(".computer__row-header"),y=document.querySelector(".computer__grid");(0,e.Bh)(C,"col"),(0,e.Bh)(f,"row"),(0,e.FY)(x),(0,e.Bh)(b,"col"),(0,e.Bh)(E,"row"),(0,e.FY)(y);const B=(0,m.lA)(),v=B.playerBoard.getShipCoordinatesObj(),w=B.compBoard.getShipCoordinatesObj();(0,e.el)(v,"player"),(0,e.el)(w,"computer"),document.querySelectorAll(".computer__grid .box").forEach((n=>{n.addEventListener("click",(n=>{B.player.attack(B.compBoard,n.target.dataset.coordinate),(0,e.Pj)(B.compBoard,"computer"),(0,e.To)(n.target),B.checkWinner(),B.comp.compAttack(B.playerBoard),(0,e.Pj)(B.playerBoard,"player"),B.checkWinner()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,