(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --neutral: #525252;\n  --sky: #e0f2fe;\n  box-sizing: border-box;\n  font: 14px;\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid var(--neutral);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid var(--neutral);\n  width: 10%;\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;;EAEE,iBAAiB;EACjB,aAAa;EACb,aAAa;AACf;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;;EAEE,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,eAAe;EACf,gCAAgC;AAClC;;AAEA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,WAAW;AACb;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,UAAU;EACV,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;AACjB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --neutral: #525252;\n  --sky: #e0f2fe;\n  box-sizing: border-box;\n  font: 14px;\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid var(--neutral);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid var(--neutral);\n  width: 10%;\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var A=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(u);else{var f=o(u,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),l=0;l<a.length;l++){var d=t(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},672:(e,n,t)=>{t.d(n,{VL:()=>r,J5:()=>o});const r=()=>{const e=[],n={},t=[];let r=1;const o=()=>{const e=Object.values(n);return[].concat(...e)};return{placeShip:(t,o)=>{const a=parseInt(t[0],36)-9,i=parseInt(t[1],10),c=parseInt(o[0],36)-9-a,s=parseInt(o[1],10)-i,l=`Ship${r}`;let d=0;const p=[];if(0===c){d=s;for(let e=0;e<s+1;e+=1)p.push((a+9).toString(36).toUpperCase()+(i+e).toString());n[l]=p}else{d=c;for(let e=0;e<c+1;e+=1)p.push((a+e+9).toString(36).toUpperCase()+i.toString());n[l]=p}const A=((e,n)=>{const t=(e=>{const n=[];for(let t=0;t<e;t+=1)n.push("not hit");return n})(e);return{shipLength:e,shipName:n,hit:e=>{t[e]="hit"},isSunk:()=>!t.includes("not hit"),getShipHitArr:()=>t}})(d,l);e.push(A),r+=1},getShipCoordinatesObj:()=>n,getShipCoordinatesArr:o,receiveAttack:n=>{if(o().includes(n)){const t=(a=n,Object.keys(a).find((e=>a[e].includes(undefined))));r=t,e.forEach((e=>{e.shipName===r&&e.hit()}))}else t.push(n);var r,a},getShips:()=>e,getMissedAttacksArr:()=>t,areAllShipsSunk:()=>{let n=!0;for(let t=0;t<e.length;t+=1)!1===e[t].isSunk()&&(n=!1);return n}}},o=()=>{const e=(e,n)=>{e.receiveAttack(n)};return{attack:e,compAttack:n=>{const t=()=>Math.floor(10*Math.random()+1),r=(()=>(t()+9).toString(36)).toUpperCase()+t.toString();e(n,r)}}}},171:(e,n,t)=>{t.d(n,{Bh:()=>r,FY:()=>o,el:()=>a,pk:()=>i});const r=(e,n)=>{for(let t=0;t<10;t+=1){const r=document.createElement("div");"col"===n?(r.classList.add("col-box"),r.textContent=String.fromCharCode(97+t).toUpperCase()):"row"===n&&(r.classList.add("row-box"),r.textContent=t+1),e.appendChild(r)}},o=e=>{for(let n=0;n<10;n+=1)for(let t=0;t<10;t+=1){const r=document.createElement("div");r.classList.add("box");const o=String.fromCharCode(97+t).toUpperCase(),a=(n+1).toString();r.dataset.coordinate=o+a,e.appendChild(r)}},a=e=>{const n=Object.values(e);document.querySelectorAll(".box").forEach((e=>{for(let t=0;t<n.length;t+=1)for(let r=0;r<n[t].length;r+=1)e.dataset.coordinate===n[t][r]&&(e.style.backgroundColor="var(--sky)",0===r?(e.style.borderWidth="2px 1px 2px 2px",e.style.borderStyle="solid dotted solid solid"):r===n[t].length-1?(e.style.borderWidth="2px 2px 2px 1px",e.style.borderStyle="solid solid solid dotted"):(e.style.borderWidth="2px 1px 2px 1px",e.style.borderStyle="solid dotted"))}))},i=()=>{document.querySelectorAll(".computer__grid .box").forEach((e=>{e.addEventListener("click",(e=>{e.target.textContent="X"}))}))}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(171),n=t(379),r=t.n(n),o=t(795),a=t.n(o),i=t(569),c=t.n(i),s=t(565),l=t.n(s),d=t(216),p=t.n(d),A=t(589),u=t.n(A),f=t(28),h={};h.styleTagTransform=u(),h.setAttributes=l(),h.insert=c().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=p(),r()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;var m=t(672);const g=document.querySelector(".player__col-header"),C=document.querySelector(".player__row-header"),E=document.querySelector(".player__grid"),y=document.querySelector(".computer__col-header"),b=document.querySelector(".computer__row-header"),v=document.querySelector(".computer__grid");(0,e.Bh)(g,"col"),(0,e.Bh)(C,"row"),(0,e.FY)(E),(0,e.Bh)(y,"col"),(0,e.Bh)(b,"row"),(0,e.FY)(v),(()=>{const n=(0,m.VL)();(0,m.VL)(),(0,m.J5)(),(0,m.J5)(),n.placeShip("A1","E1"),n.placeShip("A3","D3"),n.placeShip("F3","I3"),n.placeShip("A5","C5"),n.placeShip("E5","G5"),n.placeShip("A6","C6"),n.placeShip("A8","B8"),n.placeShip("D8","E8"),n.placeShip("G8","H8"),n.placeShip("A9","B9");const t=n.getShipCoordinatesObj();(0,e.el)(t),(0,e.pk)()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,