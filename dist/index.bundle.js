(()=>{"use strict";var e={28:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  box-sizing: border-box;\n  font: 14px;\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid black;\n  width: 10%;\n  height: 10%;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;;EAEE,iBAAiB;EACjB,aAAa;EACb,aAAa;AACf;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;;EAEE,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,WAAW;AACb;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,UAAU;EACV,WAAW;AACb",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  box-sizing: border-box;\n  font: 14px;\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid black;\n  width: 10%;\n  height: 10%;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);t&&i[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),n.push(p))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=t.base?s[0]+t.base:s[0],p=a[l]||0,A="".concat(l," ").concat(p);a[l]=p+1;var d=r(A),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)n[d].references++,n[d].updater(u);else{var h=o(u,t);t.byIndex=c,n.splice(c,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);n[c].references--}for(var s=t(e,o),l=0;l<a.length;l++){var p=r(a[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}a=s}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},672:(e,n,r)=>{r.d(n,{VL:()=>t,J5:()=>o});const t=()=>{const e=[],n={},r=[];let t=1;const o=()=>{const e=Object.values(n);return[].concat(...e)};return{placeShip:(r,o)=>{const a=parseInt(r[0],36)-9,i=parseInt(r[1],10),c=parseInt(o[0],36)-9-a,s=parseInt(o[1],10)-i,l=`Ship${t}`;let p=0;const A=[];if(0===c){p=s;for(let e=0;e<s+1;e+=1)A.push((a+9).toString(36).toUpperCase()+(i+e).toString());n[l]=A}else{p=c;for(let e=0;e<c+1;e+=1)A.push((a+e+9).toString(36).toUpperCase()+i.toString());n[l]=A}const d=((e,n)=>{const r=(e=>{const n=[];for(let r=0;r<e;r+=1)n.push("not hit");return n})(e);return{shipLength:e,shipName:n,hit:e=>{r[e]="hit"},isSunk:()=>!r.includes("not hit"),getShipHitArr:()=>r}})(p,l);e.push(d),t+=1},getShipCoordinatesObj:()=>n,getShipCoordinatesArr:o,receiveAttack:n=>{if(o().includes(n)){const r=(a=n,Object.keys(a).find((e=>a[e].includes(undefined))));t=r,e.forEach((e=>{e.shipName===t&&e.hit()}))}else r.push(n);var t,a},getShips:()=>e,getMissedAttacksArr:()=>r,areAllShipsSunk:()=>{let n=!0;for(let r=0;r<e.length;r+=1)!1===e[r].isSunk()&&(n=!1);return n}}},o=()=>{const e=(e,n)=>{e.receiveAttack(n)};return{attack:e,compAttack:n=>{const r=()=>Math.floor(10*Math.random()+1),t=(()=>(r()+9).toString(36)).toUpperCase()+r.toString();e(n,t)}}}},171:(e,n,r)=>{r.d(n,{Bh:()=>t,FY:()=>o,el:()=>a});const t=(e,n)=>{for(let r=0;r<10;r+=1){const t=document.createElement("div");"col"===n?(t.classList.add("col-box"),t.textContent=String.fromCharCode(97+r).toUpperCase()):"row"===n&&(t.classList.add("row-box"),t.textContent=r+1),e.appendChild(t)}},o=e=>{for(let n=0;n<10;n+=1)for(let r=0;r<10;r+=1){const t=document.createElement("div");t.classList.add("box");const o=String.fromCharCode(97+r).toUpperCase(),a=(n+1).toString();t.dataset.coordinate=o+a,e.appendChild(t)}},a=e=>{const n=e;console.log(n);const r=document.querySelectorAll(".box");console.log(r),r.forEach((e=>{for(let r=0;r<n.length;r+=1)e.dataset.coordinate===n[r]&&(e.style.backgroundColor="blue")}))}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=r(171),n=r(379),t=r.n(n),o=r(795),a=r.n(o),i=r(569),c=r.n(i),s=r(565),l=r.n(s),p=r(216),A=r.n(p),d=r(589),u=r.n(d),h=r(28),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=A(),t()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var f=r(672);const g=document.querySelector(".player__col-header"),C=document.querySelector(".player__row-header"),E=document.querySelector(".player__grid"),y=document.querySelector(".computer__col-header"),b=document.querySelector(".computer__row-header"),v=document.querySelector(".computer__grid");(0,e.Bh)(g,"col"),(0,e.Bh)(C,"row"),(0,e.FY)(E),(0,e.Bh)(y,"col"),(0,e.Bh)(b,"row"),(0,e.FY)(v),(()=>{const n=(0,f.VL)();(0,f.VL)(),(0,f.J5)(),(0,f.J5)(),n.placeShip("A1","E1"),n.placeShip("A3","D3"),n.placeShip("F3","I3"),n.placeShip("A5","C5"),n.placeShip("E5","G5"),n.placeShip("A6","C6"),n.placeShip("A8","B8"),n.placeShip("D8","E8"),n.placeShip("G8","H8"),n.placeShip("A9","B9");const r=n.getShipCoordinatesArr();(0,e.el)(r)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWtCekgsU0FBU0MsY0FBYyx1QkFDekN5SCxFQUFhMUgsU0FBU0MsY0FBYyxpQkFFcEMwSCxFQUFnQjNILFNBQVNDLGNBQWMseUJBQ3ZDMkgsRUFBZ0I1SCxTQUFTQyxjQUFjLHlCQUN2QzRILEVBQVc3SCxTQUFTQyxjQUFjLG9CQUV4QyxRQUFjdUgsRUFBaUIsUUFDL0IsUUFBY0MsRUFBaUIsUUFDL0IsUUFBWUMsSUFFWixRQUFjQyxFQUFlLFFBQzdCLFFBQWNDLEVBQWUsUUFDN0IsUUFBWUMsR0FFQyxNQUNYLE1BQU1DLEdBQWMsV0FDRixXQUNILFdBQ0YsVUFFYkEsRUFBWTFGLFVBQVUsS0FBTSxNQUM1QjBGLEVBQVkxRixVQUFVLEtBQU0sTUFDNUIwRixFQUFZMUYsVUFBVSxLQUFNLE1BQzVCMEYsRUFBWTFGLFVBQVUsS0FBTSxNQUM1QjBGLEVBQVkxRixVQUFVLEtBQU0sTUFDNUIwRixFQUFZMUYsVUFBVSxLQUFNLE1BQzVCMEYsRUFBWTFGLFVBQVUsS0FBTSxNQUM1QjBGLEVBQVkxRixVQUFVLEtBQU0sTUFDNUIwRixFQUFZMUYsVUFBVSxLQUFNLE1BQzVCMEYsRUFBWTFGLFVBQVUsS0FBTSxNQUU1QixNQUFNMkQsRUFBcUIrQixFQUFZOUYseUJBQ3ZDLFFBQWErRCxJQUdmZ0MsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzLmNzcz80NGIyIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBpbmhlcml0O1xcbn1cXG5cXG46cm9vdCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udDogMTRweDtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMSwgMWZyKTtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcbn1cXG5cXG4ucGxheWVyIHtcXG4gIGdyaWQtY29sdW1uOiAyLzY7XFxuICBncmlkLXJvdzogMy85O1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDExLCAxZnIpO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTEsIDFmcik7XFxufVxcblxcbi5jb21wdXRlciB7XFxuICBncmlkLWNvbHVtbjogNy8xMTtcXG4gIGdyaWQtcm93OiAzLzk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTEsIDFmcik7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMSwgMWZyKTtcXG59XFxuXFxuLnBsYXllcl9fY29sLWhlYWRlcixcXG4uY29tcHV0ZXJfX2NvbC1oZWFkZXIge1xcbiAgZ3JpZC1jb2x1bW46IDIvMTI7XFxuICBncmlkLXJvdzogMS8yO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLnBsYXllcl9fcm93LWhlYWRlcixcXG4uY29tcHV0ZXJfX3Jvdy1oZWFkZXIge1xcbiAgZ3JpZC1jb2x1bW46IDEvMjtcXG4gIGdyaWQtcm93OiAyLzEyO1xcbn1cXG5cXG4ucGxheWVyX19ncmlkLFxcbi5jb21wdXRlcl9fZ3JpZCB7XFxuICBncmlkLWNvbHVtbjogMi8xMjtcXG4gIGdyaWQtcm93OiAyLzEyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmNvbXB1dGVyIHtcXG4gIGdyaWQtY29sdW1uOiA3LzExO1xcbiAgZ3JpZC1yb3c6IDMvOTtcXG59XFxuXFxuLmNvbC1ib3gge1xcbiAgd2lkdGg6IDEwJTtcXG59XFxuXFxuLnJvdy1ib3gge1xcbiAgaGVpZ2h0OiAxMCU7XFxufVxcblxcbi5jb2wtYm94LFxcbi5yb3ctYm94IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5ib3gge1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICB3aWR0aDogMTAlO1xcbiAgaGVpZ2h0OiAxMCU7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsVUFBVTtFQUNWLFNBQVM7RUFDVCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIsVUFBVTtBQUNaOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixzQ0FBc0M7RUFDdEMsbUNBQW1DO0FBQ3JDOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixhQUFhO0VBQ2Isc0NBQXNDO0VBQ3RDLG1DQUFtQztBQUNyQzs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2IsYUFBYTtFQUNiLHNDQUFzQztFQUN0QyxtQ0FBbUM7QUFDckM7O0FBRUE7O0VBRUUsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixhQUFhO0FBQ2Y7O0FBRUE7O0VBRUUsZ0JBQWdCO0VBQ2hCLGNBQWM7QUFDaEI7O0FBRUE7O0VBRUUsaUJBQWlCO0VBQ2pCLGNBQWM7RUFDZCxhQUFhO0VBQ2IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7O0VBRUUsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsVUFBVTtFQUNWLFdBQVc7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBpbmhlcml0O1xcbn1cXG5cXG46cm9vdCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udDogMTRweDtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMSwgMWZyKTtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcbn1cXG5cXG4ucGxheWVyIHtcXG4gIGdyaWQtY29sdW1uOiAyLzY7XFxuICBncmlkLXJvdzogMy85O1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDExLCAxZnIpO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTEsIDFmcik7XFxufVxcblxcbi5jb21wdXRlciB7XFxuICBncmlkLWNvbHVtbjogNy8xMTtcXG4gIGdyaWQtcm93OiAzLzk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTEsIDFmcik7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMSwgMWZyKTtcXG59XFxuXFxuLnBsYXllcl9fY29sLWhlYWRlcixcXG4uY29tcHV0ZXJfX2NvbC1oZWFkZXIge1xcbiAgZ3JpZC1jb2x1bW46IDIvMTI7XFxuICBncmlkLXJvdzogMS8yO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLnBsYXllcl9fcm93LWhlYWRlcixcXG4uY29tcHV0ZXJfX3Jvdy1oZWFkZXIge1xcbiAgZ3JpZC1jb2x1bW46IDEvMjtcXG4gIGdyaWQtcm93OiAyLzEyO1xcbn1cXG5cXG4ucGxheWVyX19ncmlkLFxcbi5jb21wdXRlcl9fZ3JpZCB7XFxuICBncmlkLWNvbHVtbjogMi8xMjtcXG4gIGdyaWQtcm93OiAyLzEyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmNvbXB1dGVyIHtcXG4gIGdyaWQtY29sdW1uOiA3LzExO1xcbiAgZ3JpZC1yb3c6IDMvOTtcXG59XFxuXFxuLmNvbC1ib3gge1xcbiAgd2lkdGg6IDEwJTtcXG59XFxuXFxuLnJvdy1ib3gge1xcbiAgaGVpZ2h0OiAxMCU7XFxufVxcblxcbi5jb2wtYm94LFxcbi5yb3ctYm94IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5ib3gge1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICB3aWR0aDogMTAlO1xcbiAgaGVpZ2h0OiAxMCU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gQSBmYWN0b3J5IGZ1bmN0aW9uIGZvciB0aGUgc2hpcCBvYmplY3RcblxuY29uc3QgU2hpcCA9IChzaGlwTGVuZ3RoLCBzaGlwTmFtZSkgPT4ge1xuICAvLyBBIGhlbHBlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYW4gYXJyYXkgb2YgaGl0IGxvY2F0aW9uc1xuICBjb25zdCBzZXRTaGlwSGl0QXJyID0gKGxlbmd0aCkgPT4ge1xuICAgIGNvbnN0IHNoaXBIaXRBcnIgPSBbXVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2hpcEhpdEFyci5wdXNoKCdub3QgaGl0JylcbiAgICB9XG4gICAgcmV0dXJuIHNoaXBIaXRBcnJcbiAgfVxuXG4gIGNvbnN0IHNoaXBIaXRBcnIgPSBzZXRTaGlwSGl0QXJyKHNoaXBMZW5ndGgpXG5cbiAgY29uc3QgZ2V0U2hpcEhpdEFyciA9ICgpID0+IHNoaXBIaXRBcnJcblxuICAvLyBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBudW1iZXIgYW5kIG1hcmtzIHRoZSBwb3NpdGlvbiBhcyBoaXRcbiAgY29uc3QgaGl0ID0gKGhpdEluZGV4KSA9PiB7XG4gICAgc2hpcEhpdEFycltoaXRJbmRleF0gPSAnaGl0J1xuICB9XG5cbiAgLy8gQSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhbGwgb2YgdGhlIHNoaXAgcG9zaXRpb25zIGFyZSBoaXRcbiAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgIGlmKHNoaXBIaXRBcnIuaW5jbHVkZXMoJ25vdCBoaXQnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgcmV0dXJueyBzaGlwTGVuZ3RoLCBzaGlwTmFtZSwgaGl0LCBpc1N1bmssIGdldFNoaXBIaXRBcnIgfVxufVxuXG4vLyBBIGZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBnYW1lYm9hcmQgb2JqZWN0XG5cbmNvbnN0IEdhbWVib2FyZCA9ICgpID0+IHtcbiAgY29uc3Qgc2hpcHMgPSBbXVxuICBjb25zdCBzaGlwQ29vcmRpbmF0ZXNPYmogPSB7fVxuICBjb25zdCBtaXNzZWRBdHRhY2tzQXJyID0gW11cbiAgbGV0IHNoaXBDb3VudGVyID0gMVxuXG4gIGNvbnN0IGdldFNoaXBDb29yZGluYXRlc09iaiA9ICgpID0+IHNoaXBDb29yZGluYXRlc09ialxuXG4gIGNvbnN0IGdldFNoaXBDb29yZGluYXRlc0FyciA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwQ29vcmRpbmF0ZXNPYmpWYWx1ZXMgPSBPYmplY3QudmFsdWVzKHNoaXBDb29yZGluYXRlc09iailcbiAgICBjb25zdCBzaGlwQ29vcmRpbmF0ZXNBcnIgPSBbXS5jb25jYXQoLi4uc2hpcENvb3JkaW5hdGVzT2JqVmFsdWVzKVxuICAgIHJldHVybiBzaGlwQ29vcmRpbmF0ZXNBcnJcbiAgfVxuXG4gIC8vIEEgZnVuY3Rpb24gdGhhdCBhZGRzIHNoaXAgY29vcmRpbmF0ZXMgdG8gYW4gYXJyYXkgYW5kIG1ha2VzIGEgc2hpcCBvYmplY3RcblxuICBjb25zdCBwbGFjZVNoaXAgPSAoc3RhcnQsIGVuZCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0WCA9IHBhcnNlSW50KHN0YXJ0WzBdLCAzNikgLSA5XG4gICAgY29uc3Qgc3RhcnRZID0gcGFyc2VJbnQoc3RhcnRbMV0sIDEwKVxuICAgIGNvbnN0IGVuZFggPSBwYXJzZUludChlbmRbMF0sIDM2KSAtIDlcbiAgICBjb25zdCBlbmRZID0gcGFyc2VJbnQoZW5kWzFdLCAxMClcblxuICAgIGNvbnN0IHhMZW5ndGggPSBlbmRYIC0gc3RhcnRYXG4gICAgY29uc3QgeUxlbmd0aCA9IGVuZFkgLSBzdGFydFlcblxuICAgIGNvbnN0IHNoaXBOYW1lID0gYFNoaXAke3NoaXBDb3VudGVyfWBcbiAgICBsZXQgc2hpcExlbmd0aCA9IDBcbiAgICBjb25zdCBjb29yZGluYXRlc0FyciA9IFtdXG5cbiAgICBpZih4TGVuZ3RoID09PSAwKSB7XG4gICAgICBzaGlwTGVuZ3RoID0geUxlbmd0aFxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHlMZW5ndGggKyAxOyBpICs9IDEpIHtcbiAgICAgICAgY29vcmRpbmF0ZXNBcnIucHVzaCgoc3RhcnRYICsgOSkudG9TdHJpbmcoMzYpLnRvVXBwZXJDYXNlKCkgKyAoc3RhcnRZICsgaSkudG9TdHJpbmcoKSlcbiAgICAgIH1cbiAgICAgIHNoaXBDb29yZGluYXRlc09ialtzaGlwTmFtZV0gPSBjb29yZGluYXRlc0FyclxuICAgIH0gZWxzZSB7XG4gICAgICBzaGlwTGVuZ3RoID0geExlbmd0aFxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHhMZW5ndGggKyAxOyBpICs9IDEpIHtcbiAgICAgICAgY29vcmRpbmF0ZXNBcnIucHVzaCgoc3RhcnRYICsgaSArIDkpLnRvU3RyaW5nKDM2KS50b1VwcGVyQ2FzZSgpICsgKHN0YXJ0WSkudG9TdHJpbmcoKSlcbiAgICAgIH1cbiAgICAgIHNoaXBDb29yZGluYXRlc09ialtzaGlwTmFtZV0gPSBjb29yZGluYXRlc0FyclxuICAgIH1cbiAgICBcbiAgICBjb25zdCBzaGlwID0gU2hpcChzaGlwTGVuZ3RoLCBzaGlwTmFtZSlcbiAgICBzaGlwcy5wdXNoKHNoaXApXG4gICAgc2hpcENvdW50ZXIgKz0gMVxuICB9XG5cbiAgLy8gQSBoZWxwZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBrZXkgZ2l2ZW4gYSB2YWx1ZVxuICBjb25zdCBnZXRLZXlCeVZhbHVlID0gKG9iaiwgdmFsdWUpID0+IE9iamVjdC5rZXlzKG9iaikuZmluZChrZXkgPT4gb2JqW2tleV0uaW5jbHVkZXModmFsdWUpKVxuXG4gIC8vIEEgaGVscGVyIGZ1bmN0aW9uIHRoYXQgY2FsbHMgYSBoaXQgZnVuY3Rpb24gb24gYSBzaGlwIGdpdmVuIHRoZSBzaGlwIG5hbWVcbiAgY29uc3QgaGl0U2hpcCA9IChzaGlwTmFtZSkgPT4ge1xuICAgIHNoaXBzLmZvckVhY2goc2hpcCA9PiB7XG4gICAgICBpZihzaGlwLnNoaXBOYW1lID09PSBzaGlwTmFtZSkge1xuICAgICAgICBzaGlwLmhpdCgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIEEgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIGlmIGEgc2hpcCBoYXMgYmVlbiBoaXQsIHNlbmRzIHRoZSBoaXQgZnVuY3Rpb25cbiAgLy8gdG8gc2FpZCBzaGlwIGFuZCBjb2xsZWN0cyBtaXNzZWQgYXR0YWNrcyBpbiBhbiBhcnJheVxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGNvb3JkaW5hdGVzKSA9PiB7XG4gICAgY29uc3Qgc2hpcENvb3JkaW5hdGVzQXJyID0gZ2V0U2hpcENvb3JkaW5hdGVzQXJyKClcbiAgICBpZihzaGlwQ29vcmRpbmF0ZXNBcnIuaW5jbHVkZXMoY29vcmRpbmF0ZXMpKSB7XG4gICAgICBjb25zdCBzaGlwQXR0YWNrZWQgPSBnZXRLZXlCeVZhbHVlKGNvb3JkaW5hdGVzKVxuICAgICAgaGl0U2hpcChzaGlwQXR0YWNrZWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1pc3NlZEF0dGFja3NBcnIucHVzaChjb29yZGluYXRlcylcbiAgICB9XG4gIH1cblxuICBjb25zdCBnZXRTaGlwcyA9ICgpID0+IHNoaXBzXG4gIGNvbnN0IGdldE1pc3NlZEF0dGFja3NBcnIgPSAoKSA9PiBtaXNzZWRBdHRhY2tzQXJyXG5cbiAgLy8gQSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhbGwgc2hpcHMgaGF2ZSBiZWVuIHN1bmtcblxuICBjb25zdCBhcmVBbGxTaGlwc1N1bmsgPSAoKSA9PiB7XG4gICAgbGV0IGFsbFNoaXBzU3Vua0Jvb2wgPSB0cnVlXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZihzaGlwc1tpXS5pc1N1bmsoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYWxsU2hpcHNTdW5rQm9vbCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbGxTaGlwc1N1bmtCb29sXG4gIH1cblxuICByZXR1cm4geyBwbGFjZVNoaXAsIGdldFNoaXBDb29yZGluYXRlc09iaiwgZ2V0U2hpcENvb3JkaW5hdGVzQXJyLCByZWNlaXZlQXR0YWNrLCBnZXRTaGlwcywgZ2V0TWlzc2VkQXR0YWNrc0FyciwgYXJlQWxsU2hpcHNTdW5rIH1cbn1cblxuLy8gQSBmYWN0b3J5IGZ1bmN0aW9uIGZvciB0aGUgcGxheWVyIG9iamVjdFxuXG5jb25zdCBQbGF5ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGF0dGFjayA9IChib2FyZCwgY29vcmRpbmF0ZSkgPT4ge1xuICAgIGJvYXJkLnJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZSlcbiAgfVxuXG4gIGNvbnN0IGNvbXBBdHRhY2sgPSAoYm9hcmQpID0+IHtcbiAgICBjb25zdCBnZXRSYW5kb21OdW1iZXIgPSAoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAgKyAxKVxuICAgIGNvbnN0IGdldFJhbmRvbUxldHRlciA9ICgpID0+IChnZXRSYW5kb21OdW1iZXIoKSArIDkpLnRvU3RyaW5nKDM2KVxuICAgIGNvbnN0IGNvb3JkaW5hdGUgPSBnZXRSYW5kb21MZXR0ZXIudG9VcHBlckNhc2UoKSArIGdldFJhbmRvbU51bWJlci50b1N0cmluZygpXG4gICAgYXR0YWNrKGJvYXJkLCBjb29yZGluYXRlKVxuICB9XG5cbiAgcmV0dXJuIHsgYXR0YWNrLCBjb21wQXR0YWNrIH1cbn1cblxuZXhwb3J0IHsgU2hpcCwgR2FtZWJvYXJkLCBQbGF5ZXIgfSIsImNvbnN0IGRpc3BsYXlIZWFkZXIgPSAocGFyZW50LCBvcmllbnRhdGlvbikgPT4ge1xuXG4gIGZvcihsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSB7XG4gICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBcbiAgICBpZiAob3JpZW50YXRpb24gPT09IFwiY29sXCIpIHtcbiAgICAgIGJveC5jbGFzc0xpc3QuYWRkKFwiY29sLWJveFwiKTtcbiAgICAgIGJveC50ZXh0Q29udGVudCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyBpKS50b1VwcGVyQ2FzZSgpO1xuICAgIH0gZWxzZSBpZiAob3JpZW50YXRpb24gPT09IFwicm93XCIpIHtcbiAgICAgIGJveC5jbGFzc0xpc3QuYWRkKFwicm93LWJveFwiKTtcbiAgICAgIGJveC50ZXh0Q29udGVudCA9IGkgKyAxO1xuICAgIH1cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoYm94KTtcbiAgfVxufVxuXG5jb25zdCBkaXNwbGF5R3JpZCA9IChwYXJlbnQpID0+IHtcbiAgZm9yKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIHtcbiAgICBmb3IobGV0IGogPSAwOyBqIDwgMTA7IGogKz0gMSkge1xuICAgICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJveC5jbGFzc0xpc3QuYWRkKFwiYm94XCIpO1xuICAgICAgY29uc3QgeENvb3IgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3ICsgaikudG9VcHBlckNhc2UoKTtcbiAgICAgIGNvbnN0IHlDb29yID0gKGkgKyAxKS50b1N0cmluZygpO1xuICAgICAgYm94LmRhdGFzZXQuY29vcmRpbmF0ZSA9IHhDb29yICsgeUNvb3I7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoYm94KTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZGlzcGxheVNoaXBzID0gKGNvb3JkaW5hdGVBcnIpID0+IHtcbiAgY29uc3Qgc2hpcENvb3JkaW5hdGVzQXJyID0gY29vcmRpbmF0ZUFyclxuICBjb25zb2xlLmxvZyhzaGlwQ29vcmRpbmF0ZXNBcnIpXG4gIGNvbnN0IGJveEFyciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ib3gnKVxuICBjb25zb2xlLmxvZyhib3hBcnIpXG4gIGJveEFyci5mb3JFYWNoKGJveCA9PiB7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBDb29yZGluYXRlc0Fyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYoYm94LmRhdGFzZXQuY29vcmRpbmF0ZSA9PT0gc2hpcENvb3JkaW5hdGVzQXJyW2ldKSB7XG4gICAgICAgIGJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnYmx1ZSdcbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydHsgZGlzcGxheUhlYWRlciwgZGlzcGxheUdyaWQsIGRpc3BsYXlTaGlwcyB9XG5cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuaW1wb3J0IHsgZGlzcGxheUhlYWRlciwgZGlzcGxheUdyaWQsIGRpc3BsYXlTaGlwcyB9IGZyb20gJy4vZG9tJztcbmltcG9ydCAnLi9zdHlsZXMuY3NzJztcbmltcG9ydCB7IEdhbWVib2FyZCwgUGxheWVyIH0gZnJvbSAnLi9hcHAnXG5cbmNvbnN0IHBsYXllckNvbEhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF5ZXJfX2NvbC1oZWFkZXInKTtcbmNvbnN0IHBsYXllclJvd0hlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF5ZXJfX3Jvdy1oZWFkZXInKTtcbmNvbnN0IHBsYXllckdyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxheWVyX19ncmlkJyk7XG5cbmNvbnN0IGNvbXBDb2xIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29tcHV0ZXJfX2NvbC1oZWFkZXInKTtcbmNvbnN0IGNvbXBSb3dIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29tcHV0ZXJfX3Jvdy1oZWFkZXInKTtcbmNvbnN0IGNvbXBHcmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbXB1dGVyX19ncmlkJyk7XG5cbmRpc3BsYXlIZWFkZXIocGxheWVyQ29sSGVhZGVyLCAnY29sJyk7XG5kaXNwbGF5SGVhZGVyKHBsYXllclJvd0hlYWRlciwgJ3JvdycpO1xuZGlzcGxheUdyaWQocGxheWVyR3JpZCk7XG5cbmRpc3BsYXlIZWFkZXIoY29tcENvbEhlYWRlciwgJ2NvbCcpO1xuZGlzcGxheUhlYWRlcihjb21wUm93SGVhZGVyLCAncm93Jyk7XG5kaXNwbGF5R3JpZChjb21wR3JpZCk7XG5cbmNvbnN0IEdhbWUgPSAoKSA9PiB7XG4gIGNvbnN0IHBsYXllckJvYXJkID0gR2FtZWJvYXJkKClcbiAgY29uc3QgY29tcEJvYXJkID0gR2FtZWJvYXJkKClcbiAgY29uc3QgcGxheWVyID0gUGxheWVyKClcbiAgY29uc3QgY29tcCA9IFBsYXllcigpXG5cbiAgcGxheWVyQm9hcmQucGxhY2VTaGlwKCdBMScsICdFMScpXG4gIHBsYXllckJvYXJkLnBsYWNlU2hpcCgnQTMnLCAnRDMnKVxuICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoJ0YzJywgJ0kzJylcbiAgcGxheWVyQm9hcmQucGxhY2VTaGlwKCdBNScsICdDNScpXG4gIHBsYXllckJvYXJkLnBsYWNlU2hpcCgnRTUnLCAnRzUnKVxuICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoJ0E2JywgJ0M2JylcbiAgcGxheWVyQm9hcmQucGxhY2VTaGlwKCdBOCcsICdCOCcpXG4gIHBsYXllckJvYXJkLnBsYWNlU2hpcCgnRDgnLCAnRTgnKVxuICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoJ0c4JywgJ0g4JylcbiAgcGxheWVyQm9hcmQucGxhY2VTaGlwKCdBOScsICdCOScpXG5cbiAgY29uc3Qgc2hpcENvb3JkaW5hdGVzQXJyID0gcGxheWVyQm9hcmQuZ2V0U2hpcENvb3JkaW5hdGVzQXJyKClcbiAgZGlzcGxheVNoaXBzKHNoaXBDb29yZGluYXRlc0Fycilcbn1cblxuR2FtZSgpXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJHYW1lYm9hcmQiLCJzaGlwcyIsInNoaXBDb29yZGluYXRlc09iaiIsIm1pc3NlZEF0dGFja3NBcnIiLCJzaGlwQ291bnRlciIsImdldFNoaXBDb29yZGluYXRlc0FyciIsInNoaXBDb29yZGluYXRlc09ialZhbHVlcyIsIk9iamVjdCIsInZhbHVlcyIsInBsYWNlU2hpcCIsInN0YXJ0IiwiZW5kIiwic3RhcnRYIiwicGFyc2VJbnQiLCJzdGFydFkiLCJ4TGVuZ3RoIiwieUxlbmd0aCIsInNoaXBOYW1lIiwic2hpcExlbmd0aCIsImNvb3JkaW5hdGVzQXJyIiwidG9VcHBlckNhc2UiLCJzaGlwIiwic2hpcEhpdEFyciIsInNldFNoaXBIaXRBcnIiLCJoaXQiLCJoaXRJbmRleCIsImlzU3VuayIsImluY2x1ZGVzIiwiZ2V0U2hpcEhpdEFyciIsIlNoaXAiLCJnZXRTaGlwQ29vcmRpbmF0ZXNPYmoiLCJyZWNlaXZlQXR0YWNrIiwiY29vcmRpbmF0ZXMiLCJzaGlwQXR0YWNrZWQiLCJrZXlzIiwiZmluZCIsImtleSIsInZhbHVlIiwiZm9yRWFjaCIsImdldFNoaXBzIiwiZ2V0TWlzc2VkQXR0YWNrc0FyciIsImFyZUFsbFNoaXBzU3VuayIsImFsbFNoaXBzU3Vua0Jvb2wiLCJQbGF5ZXIiLCJhdHRhY2siLCJib2FyZCIsImNvb3JkaW5hdGUiLCJjb21wQXR0YWNrIiwiZ2V0UmFuZG9tTnVtYmVyIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZGlzcGxheUhlYWRlciIsInBhcmVudCIsIm9yaWVudGF0aW9uIiwiYm94IiwiY2xhc3NMaXN0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJkaXNwbGF5R3JpZCIsImoiLCJ4Q29vciIsInlDb29yIiwiZGF0YXNldCIsImRpc3BsYXlTaGlwcyIsImNvb3JkaW5hdGVBcnIiLCJzaGlwQ29vcmRpbmF0ZXNBcnIiLCJjb25zb2xlIiwibG9nIiwiYm94QXJyIiwicXVlcnlTZWxlY3RvckFsbCIsImJhY2tncm91bmRDb2xvciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicGxheWVyQ29sSGVhZGVyIiwicGxheWVyUm93SGVhZGVyIiwicGxheWVyR3JpZCIsImNvbXBDb2xIZWFkZXIiLCJjb21wUm93SGVhZGVyIiwiY29tcEdyaWQiLCJwbGF5ZXJCb2FyZCIsIkdhbWUiXSwic291cmNlUm9vdCI6IiJ9