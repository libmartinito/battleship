(()=>{"use strict";var n={28:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --neutral: #525252;\n  --neutral-shadow: rgba(82,82,82,0.5);\n  --sky: #e0f2fe;\n  box-sizing: border-box;\n  font: 14px;\n  color: var(--neutral);\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid var(--neutral);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid var(--neutral);\n  width: 10%;\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n}\n\n.box--ship {\n  background-color: var(--sky);\n}\n\n.box--start-hor {\n  border-width: 2px 1px 2px 2px;\n  border-style: solid dotted solid solid;\n}\n\n.box--end-hor {\n  border-width: 2px 2px 2px 1px;\n  border-style: solid solid solid dotted;\n}\n\n.box--mid-hor {\n  border-width: 2px 1px 2px 1px;\n  border-style: solid dotted;\n}\n\n.box--start-ver {\n  border-width: 2px 2px 1px 2px;\n  border-style: solid solid dotted solid;\n}\n\n.box--end-ver {\n  border-width: 1px 2px 2px 2px;\n  border-style: dotted solid solid solid;\n}\n\n.box--mid-ver {\n  border-width: 1px 2px 1px 2px;\n  border-style: dotted solid;\n}\n\n.box--hidden {\n  background-color: white;\n  border: 1px solid var(--neutral)\n}\n\n.modal {\n  display: block;\n  position: fixed;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background-color: var(--neutral-shadow)\n}\n\n.modal__content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10% auto;\n  width: 360px;\n  height: 280px;\n  background-color: var(--sky);\n  box-shadow: 0.3rem 0.3rem 0.8rem 0.5rem var(--neutral-shadow);\n}\n\n.modal__header {\n  font-size: 2rem;\n}\n\n.modal__body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 2rem;\n}\n\n@media screen and (max-width: 500px) {\n  .container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .player,\n  .computer {\n    width: 360px;\n    height: 360px;\n  }\n\n  .player {\n    margin-top: 8rem;\n  }\n\n  .computer {\n    margin-top: 3rem;\n    margin-bottom: 8rem;\n  }\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,oCAAoC;EACpC,cAAc;EACd,sBAAsB;EACtB,UAAU;EACV,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;;AAEA;;EAEE,iBAAiB;EACjB,aAAa;EACb,aAAa;AACf;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;;EAEE,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,eAAe;EACf,gCAAgC;AAClC;;AAEA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,WAAW;AACb;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,UAAU;EACV,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,0BAA0B;AAC5B;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,sCAAsC;AACxC;;AAEA;EACE,6BAA6B;EAC7B,0BAA0B;AAC5B;;AAEA;EACE,uBAAuB;EACvB;AACF;;AAEA;EACE,cAAc;EACd,eAAe;EACf,UAAU;EACV,MAAM;EACN,OAAO;EACP,YAAY;EACZ,WAAW;EACX;AACF;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,4BAA4B;EAC5B,6DAA6D;AAC/D;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE;IACE,aAAa;IACb,sBAAsB;IACtB,mBAAmB;EACrB;;EAEA;;IAEE,YAAY;IACZ,aAAa;EACf;;EAEA;IACE,gBAAgB;EAClB;;EAEA;IACE,gBAAgB;IAChB,mBAAmB;EACrB;AACF",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n:root {\n  --neutral: #525252;\n  --neutral-shadow: rgba(82,82,82,0.5);\n  --sky: #e0f2fe;\n  box-sizing: border-box;\n  font: 14px;\n  color: var(--neutral);\n}\n\n.container {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n\n.player {\n  grid-column: 2/6;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n}\n\n.player__col-header,\n.computer__col-header {\n  grid-column: 2/12;\n  grid-row: 1/2;\n  display: flex;\n}\n\n.player__row-header,\n.computer__row-header {\n  grid-column: 1/2;\n  grid-row: 2/12;\n}\n\n.player__grid,\n.computer__grid {\n  grid-column: 2/12;\n  grid-row: 2/12;\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid var(--neutral);\n}\n\n.computer {\n  grid-column: 7/11;\n  grid-row: 3/9;\n}\n\n.col-box {\n  width: 10%;\n}\n\n.row-box {\n  height: 10%;\n}\n\n.col-box,\n.row-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.box {\n  border: 1px solid var(--neutral);\n  width: 10%;\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n}\n\n.box--ship {\n  background-color: var(--sky);\n}\n\n.box--start-hor {\n  border-width: 2px 1px 2px 2px;\n  border-style: solid dotted solid solid;\n}\n\n.box--end-hor {\n  border-width: 2px 2px 2px 1px;\n  border-style: solid solid solid dotted;\n}\n\n.box--mid-hor {\n  border-width: 2px 1px 2px 1px;\n  border-style: solid dotted;\n}\n\n.box--start-ver {\n  border-width: 2px 2px 1px 2px;\n  border-style: solid solid dotted solid;\n}\n\n.box--end-ver {\n  border-width: 1px 2px 2px 2px;\n  border-style: dotted solid solid solid;\n}\n\n.box--mid-ver {\n  border-width: 1px 2px 1px 2px;\n  border-style: dotted solid;\n}\n\n.box--hidden {\n  background-color: white;\n  border: 1px solid var(--neutral)\n}\n\n.modal {\n  display: block;\n  position: fixed;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background-color: var(--neutral-shadow)\n}\n\n.modal__content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10% auto;\n  width: 360px;\n  height: 280px;\n  background-color: var(--sky);\n  box-shadow: 0.3rem 0.3rem 0.8rem 0.5rem var(--neutral-shadow);\n}\n\n.modal__header {\n  font-size: 2rem;\n}\n\n.modal__body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 2rem;\n}\n\n@media screen and (max-width: 500px) {\n  .container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .player,\n  .computer {\n    width: 360px;\n    height: 360px;\n  }\n\n  .player {\n    margin-top: 8rem;\n  }\n\n  .computer {\n    margin-top: 3rem;\n    margin-bottom: 8rem;\n  }\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var d=n[s],l=r.base?d[0]+r.base:d[0],A=a[l]||0,c="".concat(l," ").concat(A);a[l]=A+1;var p=t(c),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:m,references:1})}i.push(c)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var d=r(n,o),l=0;l<a.length;l++){var A=t(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=d}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},672:(n,e,t)=>{t.d(e,{lA:()=>i});var r=t(171);const o=()=>{const n=[],e={},t=[];let r=1;const o=()=>{const n=Object.values(e);return[].concat(...n)},a=(t,o)=>{const a=parseInt(t[0],36)-9;let i=0;const s=parseInt(o[0],36)-9;let d=0;i=void 0===t[2]?parseInt(t[1],10):parseInt(t.substr(t.length-2),10),d=void 0===o[2]?parseInt(o[1],10):parseInt(o.substr(o.length-2),10);const l=s-a,A=d-i,c=`Ship${r}`;let p=0;const u=[];if(0===l){p=A+1;for(let n=0;n<A+1;n+=1)u.push((a+9).toString(36).toUpperCase()+(i+n).toString());e[c]=u}else{p=l+1;for(let n=0;n<l+1;n+=1)u.push((a+n+9).toString(36).toUpperCase()+i.toString());e[c]=u}const m=((n,e)=>{const t=(n=>{const e=[];for(let t=0;t<n;t+=1)e.push("not hit");return e})(n);return{shipLength:n,shipName:e,hit:n=>{t[n]="hit"},isSunk:()=>!t.includes("not hit"),getShipHitArr:()=>t}})(p,c);n.push(m),r+=1},i=()=>Math.floor(10*Math.random()+1),s=(n,e)=>{const t=parseInt(n[0],36)-9;let r=0;const o=parseInt(e[0],36)-9;let a=0;r=void 0===n[2]?parseInt(n[1],10):parseInt(n.substr(n.length-2),10),a=void 0===e[2]?parseInt(e[1],10):parseInt(e.substr(e.length-2),10);const i=o-t,s=a-r,d=[];if(0===i)for(let n=0;n<s+1;n+=1)d.push((t+9).toString(36).toUpperCase()+(r+n).toString());else if(0===s)for(let n=0;n<i+1;n+=1)d.push((t+n+9).toString(36).toUpperCase()+r.toString());return d},d=n=>{const e=n,t=o();let r=!1;for(let n=0;n<e.length;n+=1)t.includes(e[n])&&(r=!0);return r},l=(n,e)=>{const t=[];for(let r=0;r<e.length;r+=1){const o=s(n,e[r]);d(o)&&t.push(e[r])}const r=[];for(let n=0;n<e.length;n+=1)t.includes(e[n])||r.push(e[n]);return r},A=(n,e)=>{const t=parseInt(n[0],36)-9;let r=0;r=void 0===n[2]?parseInt(n[1],10):parseInt(n.substr(n.length-2),10);const o=[];return t+e<11&&o.push((t+e+9).toString(36).toUpperCase()+r.toString()),r+e<11&&o.push((t+9).toString(36).toUpperCase()+(r+e).toString()),o},c=n=>{let e=[],t="";for(;0===e.length;){const r=(i()+9).toString(36).toUpperCase()+i().toString(),o=A(r,n);t=r,e=l(r,o)}const r=(0,o=e.length-1,Math.floor(Math.random()*(o-0+1))+0);var o;a(t,e[r])};return{placeShip:a,fillBoardRandomly:()=>{const n=[4,3,2,1];for(let e=0;e<n.length;e+=1){let t=e;for(;t+1>0;)c(n[e]),t-=1}},getShipCoordinatesObj:()=>e,getShipCoordinatesArr:o,receiveAttack:r=>{if(o().includes(r)){const t=(s=e,d=r,Object.keys(s).find((n=>s[n].includes(d))));a=t,i=e[t].indexOf(r),n.forEach((n=>{n.shipName===a&&n.hit(i)}))}else t.push(r);var a,i,s,d},getShips:()=>n,getMissedAttacksArr:()=>t,areAllShipsSunk:()=>{let e=!0;for(let t=0;t<n.length;t+=1)!1===n[t].isSunk()&&(e=!1);return e}}},a=()=>{const n=(n,e)=>{n.receiveAttack(e)};return{attack:n,compAttack:e=>{const t=()=>Math.floor(10*Math.random()+1),r=(t()+9).toString(36).toUpperCase()+t().toString();n(e,r)}}},i=()=>{const n=o(),e=o(),t=a(),i=a();return n.fillBoardRandomly(),e.fillBoardRandomly(),{playerBoard:n,compBoard:e,player:t,comp:i,checkWinner:()=>{n.areAllShipsSunk()?(0,r.DE)("computer"):e.areAllShipsSunk()&&(0,r.DE)("player")}}}},171:(n,e,t)=>{t.d(e,{Bh:()=>r,FY:()=>o,el:()=>s,To:()=>d,Pj:()=>c,DE:()=>p});const r=(n,e)=>{for(let t=0;t<10;t+=1){const r=document.createElement("div");"col"===e?(r.classList.add("col-box"),r.textContent=String.fromCharCode(97+t).toUpperCase()):"row"===e&&(r.classList.add("row-box"),r.textContent=t+1),n.appendChild(r)}},o=n=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1){const r=document.createElement("div");r.classList.add("box");const o=String.fromCharCode(97+t).toUpperCase(),a=(e+1).toString();r.dataset.coordinate=o+a,n.appendChild(r)}},a=n=>{let e="";return e=n[0][0]===n[1][0]?"ver":"hor",e},i=n=>{n.parentElement.classList.contains("computer__grid")&&n.classList.add("box--hidden")},s=(n,e)=>{const t=Object.values(n);let r="";r="player"===e?document.querySelectorAll(".player__grid .box"):document.querySelectorAll(".computer__grid .box"),r.forEach((n=>{for(let e=0;e<t.length;e+=1){const r=a(t[e]);for(let o=0;o<t[e].length;o+=1)n.dataset.coordinate===t[e][o]&&(n.classList.add("box--ship"),0===o?(n.classList.add(`box--start-${r}`),i(n)):o===t[e].length-1?(n.classList.add(`box--end-${r}`),i(n)):(n.classList.add(`box--mid-${r}`),i(n)))}}))},d=n=>{n.classList.remove("box--hidden")},l=n=>{const e=[];for(let t=0;t<n.length;t+=1)"hit"===n[t]&&e.push(t);return e},A=(n,e)=>{const t=[];for(let r=0;r<n.length;r+=1)t.push(e[n[r]]);return t},c=(n,e)=>{const t=n.getShips(),r=Object.values(n.getShipCoordinatesObj()),o=[],a=n.getMissedAttacksArr();for(let n=0;n<t.length;n+=1){const e=t[n].getShipHitArr(),a=l(e);console.log(a);const i=r[n];console.log(i);const s=A(a,i);o.push(s)}const i=[].concat(...o);let s="";s="player"===e?document.querySelectorAll(".player__grid .box"):document.querySelectorAll(".computer__grid .box"),s.forEach((n=>{for(let e=0;e<i.length;e+=1)n.dataset.coordinate===i[e]&&(n.textContent="X");for(let e=0;e<a.length;e+=1)n.dataset.coordinate===a[e]&&(n.textContent="X")}))},p=n=>{const e=n,t=document.querySelector(".modal"),r=document.querySelector(".modal__header"),o=document.querySelector(".modal__body");if(""===r.textContent)if("player"===e){r.textContent="Congratulations!";const n=document.createElement("p");n.textContent="You won the game, champ!";const e=document.createElement("p");e.textContent="Time to look for bigger";const t=document.createElement("p");t.textContent="dragons to slay.",o.appendChild(n),o.appendChild(e),o.appendChild(t)}else{r.textContent="Tough luck.";const n=document.createElement("p");n.textContent="You lost the game.";const e=document.createElement("p");e.textContent="Refresh for another game or not.";const t=document.createElement("p");t.textContent="You are the master of your fate.",o.appendChild(n),o.appendChild(e),o.appendChild(t)}t.style.display="block"}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(171),e=t(379),r=t.n(e),o=t(795),a=t.n(o),i=t(569),s=t.n(i),d=t(565),l=t.n(d),A=t(216),c=t.n(A),p=t(589),u=t.n(p),m=t(28),h={};h.styleTagTransform=u(),h.setAttributes=l(),h.insert=s().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=c(),r()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;var C=t(672);const g=document.querySelector(".player__col-header"),E=document.querySelector(".player__row-header"),f=document.querySelector(".player__grid"),x=document.querySelector(".computer__col-header"),b=document.querySelector(".computer__row-header"),B=document.querySelector(".computer__grid");(0,n.Bh)(g,"col"),(0,n.Bh)(E,"row"),(0,n.FY)(f),(0,n.Bh)(x,"col"),(0,n.Bh)(b,"row"),(0,n.FY)(B);const y=(0,C.lA)(),v=y.playerBoard.getShipCoordinatesObj(),w=y.compBoard.getShipCoordinatesObj();(0,n.el)(v,"player"),(0,n.el)(w,"computer"),document.querySelectorAll(".computer__grid .box").forEach((e=>{e.addEventListener("click",(e=>{y.player.attack(y.compBoard,e.target.dataset.coordinate),(0,n.Pj)(y.compBoard,"computer"),(0,n.To)(e.target),y.checkWinner(),y.comp.compAttack(y.playerBoard),(0,n.Pj)(y.playerBoard,"player"),y.checkWinner()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,